# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:19:15+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

app = MCPProxy(
    contact={'name': 'Fun Generators', 'url': 'https://fungenerators.com/'},
    description='A full featured, REST based UUID generator with json/xml/jsonp result support. You can try them out right here. [Click here to subscribe](http://fungenerators.com/api/uuid/)\n',
    termsOfService='https://fungenerators.com/terms',
    title='UUID Generation API',
    version='1.5',
    servers=[{'url': 'https://api.fungenerators.com'}],
)


@app.get(
    '/uuid',
    description=""" Generate a random UUID (v4). """,
    tags=['uuid_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_uuid(count: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/uuid',
    description=""" Parse a UUID string and return its version and check whether it is valid. """,
    tags=['uuid_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def post_uuid(uuidstr: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/uuid/version/{version}',
    description=""" Generate a random UUID (v4). """,
    tags=['uuid_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_uuid_version__version(
    count: Optional[int] = None,
    version: int = ...,
    type: Optional[str] = None,
    text: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
